var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [BBModels]","category":"page"},{"location":"reference/#BBModels.BBModel","page":"Reference","title":"BBModels.BBModel","text":"Mutable struct BBModel\n\nRepresents a black box optimization problem that follows the NLPModel API.\n\nThe following constructors are available:\n\nBBModel(parameter_set, problems, solver_function, f; kwargs...)\nBBModel(parameter_set, problems, solver_function, f, c, lcon, ucon; kwargs...)\n\nparameter_set::AbstractParameterSet: structure containing parameters information;\nproblems::Vector{AbstractNLPModel}: set of problem to run the benchmark on;\nsolver_function::Function: function that takes an AbstractNLPModel and a AbstractParameterSet and returns a GenericExecutionStats.\nf::Function: Given a Vector{ProblemMetrics} returns a score as a Float64 (examples are time_only, memory_only, sumfc);\n\nFor constrained problems:\n\nlcon ≤ c(x) ≤ ucon\n\nc::Function: constraint function;\nlcon::AbstractVector: lower bound on the constraint;\nucon::AbstractVector: upper bound on the constraint.\n\nAdditional keyword arguments are:\n\nsubset::NTuple{N, Symbol}: subset of parameters to be considered (by default all parameters from parameter_set);\nx0::AbstractVector: initial values for the parameters (by default Float64.(values(parameter_set)));\nlvar::AbstractVector: lower bound on the the parameters (by default Float64.(lower_bounds(parameter_set)));\nuvar::AbstractVector: upper bound on the the parameters (by default Float64.(lower_bounds(parameter_set)));\nname::String: name of the problem (by default: \"Generic\").\n\nNote that if x0 is not provided, the computations are run in Vector{Float64}.\n\n\n\n\n\n","category":"type"},{"location":"reference/#BBModels.BBModelMeta","page":"Reference","title":"BBModels.BBModelMeta","text":"BBModelMeta\n\nA composite type that represents the main features of the blackbox optimization problem of parameters.\n\n\n\nBBModelMeta(parameter_set::P [, subset::NTuple{N, Symbol} = fieldnames(P)])\n\nCreate an BBModelMeta of all parameters or a subset on a parameter_set of type P <: AbstractParameterSet.\n\nBBModelMeta contains the following attributes:\n\nnvar: number of variables;\nx_n::Vector{String}: names of the parameters;\nicat::Vector{Int}: indices of categorical variables;\nibool::Vector{Int}: indices of boolean variables;\niint::Vector{Int}: indices of integer variables;\nifloat::Vector{Int}: indices of real variables.\n\n\n\n\n\n","category":"type"},{"location":"reference/#BBModels.Problem","page":"Reference","title":"BBModels.Problem","text":"Mutable struct Problem\n\nKeep track of an instance of an AbstractNLPModel in a distributed context by giving each instance an id and a non-negative weight.\n\nThe following constructor is available:\n\nProblem(id::Int, nlp::Union{AbstractNLPModel, Function}, weight::Float64)\n\nAssign an id and a weight to the problem nlp. Note that nlp can be given as an Function returning an AbstractNLPModel once evaluated.\n\n\n\n\n\n","category":"type"},{"location":"reference/#BBModels.Problem-Tuple{Int64, NLPModels.AbstractNLPModel}","page":"Reference","title":"BBModels.Problem","text":"Constructor of a Problem. Takes an id and an AbstractNLPModel.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BBModels.ProblemMetrics","page":"Reference","title":"BBModels.ProblemMetrics","text":"ProblemMetrics\n\nStructure that contains metrics of a given solver applied to an AbstractNLPModel.\n\nThe following metrics are stored:\n\npb_id::Int: identifier of the problem solved, see Problem;\ntimes::Vector{Float64}: Execution time of the attempts of solving the nlp;\nmemory::Int: Memory allocated to solve the nlp;\nstatus::Symbol: Status of the nlp after solve, see SolverCore.jl's documentation;\ncounters::Counters: Counters of the nlp, see NLPModels.jl's documentation.\n\n\n\n\n\n","category":"type"},{"location":"reference/#BBModels.cost-Tuple{BBModel, Problem}","page":"Reference","title":"BBModels.cost","text":"cost(nlp::BBModel, p::Problem; seconds = 10.0, samples = 1, evals = 1)\n\nFor a given problem p::Problem, it returns a ProblemMetrics containing the benchmark's results of nlp.solver_function. The keyword arguments are parameters for the benchmark.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BBModels.get_counters-Tuple{ProblemMetrics}","page":"Reference","title":"BBModels.get_counters","text":"Returns the Counters related the problem linked to this ProblemMetrics instance.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BBModels.get_cpu_frequency-Tuple{}","page":"Reference","title":"BBModels.get_cpu_frequency","text":"Returns the CPU frequency in GHz of the host executing this function.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BBModels.get_id-Tuple{Problem}","page":"Reference","title":"BBModels.get_id","text":"Returns the id of a Problem.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BBModels.get_memory-Tuple{ProblemMetrics}","page":"Reference","title":"BBModels.get_memory","text":"Returns the memory allocated in Mb to solve the problem linked to this ProblemMetrics instance.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BBModels.get_nlp-Tuple{Problem}","page":"Reference","title":"BBModels.get_nlp","text":"Returns the AbstractNLPModel of a Problem.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BBModels.get_pb_id-Tuple{ProblemMetrics}","page":"Reference","title":"BBModels.get_pb_id","text":"Returns the id of the problem linked to this ProblemMetrics instance.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BBModels.get_status-Tuple{ProblemMetrics}","page":"Reference","title":"BBModels.get_status","text":"Returns the problem linked to this ProblemMetrics instance is solved.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BBModels.get_times-Tuple{ProblemMetrics}","page":"Reference","title":"BBModels.get_times","text":"Returns the times required in seconds to solve the problem linked to this ProblemMetrics instance.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BBModels.is_failure-Tuple{Symbol}","page":"Reference","title":"BBModels.is_failure","text":"is_failure(status::Symbol)\nis_failure(stats::AbstractExecutionStats)\n\nReturns true if a status is considered a failure. SolverCore.show_statuses() return the list of all possible statuses.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BBModels.memory_only-Tuple{Vector{ProblemMetrics}}","page":"Reference","title":"BBModels.memory_only","text":"memory_only(vec_metric::Vector{ProblemMetrics}; penalty::Float64 = 5.0)\n\nReturn the memory used in p_metric. Unsolved problems are penalyzed by a penalty factor.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BBModels.normalize_times!-Tuple{Vector{Float64}}","page":"Reference","title":"BBModels.normalize_times!","text":"Modifies in place a Vector of times by dividing each value by the frequency of the CPU in Mz.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BBModels.obj_cat-Tuple{BBModel, AbstractVector}","page":"Reference","title":"BBModels.obj_cat","text":"obj_cat(nlp::BBModel, x::AbstractVector; kwargs...)\n\nObjective function of the BBModel. The difference with obj is that x contains all the parameters (including categorical variables). Therefore, x is of length nlp.bb_meta.nvar.\n\nThe keyword arguments are passed to cost.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BBModels.obj_nomad-Tuple{BBModel, AbstractVector, Vector{Problem}}","page":"Reference","title":"BBModels.obj_nomad","text":"obj_nomad(nlp::BBModel, x::AbstractVector, problems::Vector{Problem}; kwargs...)\n\nObjective function of the BBModel to be used with SolverTuning.jl.  The difference with obj is the positional parameter problems. Therefore, x is of length nlp.meta.nvar.\n\nThe keyword arguments are passed to cost.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BBModels.random_search-Tuple{BBModel}","page":"Reference","title":"BBModels.random_search","text":"random_search(model::BBModel; verbose = 0, max_time = 30.0, max_iter = 10)\n\nGenerate random values of the parameter set.\n\nKeywords arguments:\n\ncheck_cache :: Bool = true: Check if x has already been evaluated;\nverbose :: Integer = 0: Print iteration information if >0;\nmax_time :: Float64 = 30.0: time limit in seconds;\nmax_iter :: Integer = 10: maximum number of iterations.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BBModels.sumfc-Tuple{Vector{ProblemMetrics}}","page":"Reference","title":"BBModels.sumfc","text":"sumfc(vec_metric::Vector{ProblemMetrics}; penalty::Float64 = 5.0)\n\nReturn the sum of the evaluations of the objective function and constraint function. Unsolved problems are penalyzed by a penalty factor.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BBModels.time_only-Tuple{Vector{ProblemMetrics}}","page":"Reference","title":"BBModels.time_only","text":"time_only(vec_metric::Vector{ProblemMetrics}; penalty::Float64 = 5.0)\n\nReturn the median time, if more than one solve, of p_metric. Unsolved problems are penalyzed by a penalty factor.\n\n\n\n\n\n","category":"method"},{"location":"reference/#BBModels.types_indices-Union{Tuple{N}, Tuple{P}, Tuple{P, Tuple{Vararg{Symbol, N}}}} where {P<:SolverParameters.AbstractParameterSet, N}","page":"Reference","title":"BBModels.types_indices","text":"types_indices(parameter_set::P [, subset::NTuple{N, Symbol} = fieldnames(P)])\n\nReturn the set of indices of categorical, boolean, integer and real parameters within the subset of fields in P <: AbstractParameterSet.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NLPModels.obj-Tuple{BBModel, AbstractVector}","page":"Reference","title":"NLPModels.obj","text":"obj(nlp::BBModel, x::AbstractVector; kwargs...)\n\nObjective function of the BBModel.  The difference with obj_cat is that x contains only the numerical parameters (excluding categorical variables). Therefore, x is of length nlp.meta.nvar.\n\nThe keyword arguments are passed to cost.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = BBModels","category":"page"},{"location":"#BBModels","page":"Home","title":"BBModels","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BBModels.","category":"page"}]
}
